"A contract's event"
interface Event {
	"Internal ID used for indexation"
	id: ID!
}

"Erc721Transaction types"
enum Erc721TransactionType {
	MINT
	BURN
	TRANSFER
}

"A 721 transaction event, it's created every -transfer event-"
type Erc721Transaction implements Event @entity {
	"Internal ID used for indexation"
	id: ID!

	"Seller account"
	from: Account

	"Buyer account"
	to: Account

	"Erc721Transaction types"
	type: Erc721TransactionType

	"related token"
	token: Erc721Token
	
	"related block"
	block: Block

	"related evm transaction"
	transaction: Transaction
}

"An approval evm event"
type Approval implements Event @entity {
	"Internal ID used for indexation"
	id: ID!

	"Approved account"
	approved: Account

	"Owner account"
	owner: Account

	"related token"
	token: Erc721Token
	
	"related block"
	block: Block

	"related evm transaction"
	transaction: Transaction
}
"An approvalForAll evm event"
type ApprovalForAll implements Event @entity {
	"Internal ID used for indexation"
	id: ID!

	"operator owner related entity"
	operatorOwner: OperatorOwner
	
	"related block"
	block: Block

	"related evm transaction"
	transaction: Transaction
}

"A 721 holder account"
type Account @entity {
	"Internal ID used for indexation"
	id: ID!

	"Account evm address"
	address: Bytes

	"Owned tokens"
	tokens: [Erc721Token!]! @derivedFrom(field: "owner")

	"Approved tokens"
	approved: [Erc721Token!]! @derivedFrom(field: "approval")
	
	"Transactions sent by this account"
	sent: [Erc721Transaction!] @derivedFrom(field: "from")
 
	"Transactions recieved by this account"
	recieved: [Erc721Transaction!] @derivedFrom(field: "to")

	"many to many relationships with operators"
	operators: [OperatorOwner!] @derivedFrom(field: "owner")

	"many to many relationships with owners"
	approvals: [OperatorOwner!] @derivedFrom(field: "operator")
}

"Many to many relationship between accounts"
type OperatorOwner @entity {
	"Internal ID used for indexation"
	id: ID! # Set to `${owner.id}-${operator.id}`

	"Owner of the tokens"
	owner: Account

	"Approved to transfer tokens"
	operator: Account!

	"Was approved"
	approved: Boolean

	"approvalForAll evm event"
	approvalForAll: ApprovalForAll @derivedFrom(field: "operatorOwner")
}


interface Erc721Token {
	"Internal ID used for indexation"
	id: ID!

	"Token's current owner"
	owner: Account!

	"Current approval"
	approval: Account

	"Current burned status"
	burned: Boolean
}

type JoyToken implements Erc721Token @entity{
	"Internal ID used for indexation"
	id: ID!

	"Token's current owner"
	owner: Account!

	"Current approval"
	approval: Account

	"Current burned status"
	burned: Boolean
}

type Block @entity {
	"Internal ID used for indexation"
	id: ID!

	"event timestamp"
	timestamp: BigInt!	
	
	"Block's number"
    number: BigInt!

	"Erc721Transactions contained in this block"
	erc721Transactions: [Erc721Transaction!] @derivedFrom(field: "block")

	"Chain transactions info"
	transactions: [Transaction!] @derivedFrom(field: "block")
}

type Transaction @entity {
	"Internal ID used for indexation"
	id: ID!

	"Transaction's Block"
	block: Block!

	"Transaction's hash"
	hash: Bytes

	"Sender Address"
	from: Bytes

	"Transaction's gas"
    gasLimit: BigInt

	"Transaction's gas price"
    gasPrice: BigInt

	"Erc721Transactions contained in this block"
	erc721Transactions: [Erc721Transaction!] @derivedFrom(field: "transaction")
}